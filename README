Exploratory programs for an alarm clock


asciiart/

This program looks at "ascii" art ways to represent two alarms in a
single character block. I'll want to use no more than three 20 char lines
to display three alarm times (5 chars: "HH:MM") and 7 days x 4 times
alarm on / alarm off. If I can put on/off in a half cell with a valid
neither and both, then 2 lines x 7chars can show all of them. That lets
me put a "SMTWTFS" header on and still have space. This explores the
ASCII art to do that.



chargen/

This program emulates the old inet chargen service. It shows all of
the built-in 5x8 font characters. On my 20x4 screen, I use the top
two lines for 32 to 127, and the bottom two for 160 to 255. The
other octets are all blank (until defined, at least for the programmable
0 to 7 range).

This also strobes contrast, to see what looks good. The strobe stars
high and goes gradually lower, then jumps back to high. That can let
you guess where the sweet spot is: high, just after jump; low, just
before jump; or somewhere in between.



sound/

Speaker test code, for "active" and "passive" buzzers.


simple/


This is a demo of all important functionality for the alarm clock:

An LCD screen that gets written to, with a backlight that turns on and off.
Trellis array of 32 buttons and LEDs each individually controlled. (I2C)
A real time clock that gets polled every second. (I2C)
A buzzer that goes on and off.
A button separate from the Trellis that gets checked.

Trellis button are from two 4x4 units with:
https://learn.adafruit.com/adafruit-trellis-diy-open-source-led-keypad/overview)

LCD 20 x 4 screen:
https://www.amazon.com/gp/product/B00GZ6GK7A/

DS3231RTC from:
https://www.amazon.com/gp/product/B082V5BQF3/

Arduino Uno:
https://www.amazon.com/dp/B01EWOE0UU/

Misc other parts I had already

RTC Sample code from
https://create.arduino.cc/projecthub/MisterBotBreak/how-to-use-a-real-time-clock-module-ds3231-bc90fe

Used a modified version of 
https://github.com/rodan/ds3231/blob/master/examples/rtc_ds3231/rtc_ds3231.ino
to set time originally. That's a big program and uses ~35% of Uno memory.
This is down to about 24% while also controlling the Trellis buttons and
LCD screen.

  Program:    7954 bytes (24.3% Full)
  (.text + .data + .bootloader)

  Data:        690 bytes (33.7% Full)
  (.data + .bss + .noinit)

On the Uno, uses:
	SCL/SCA		for I2C
	A2 for Trellis INT (not sure if needed)
	pins 5 to 12 for LCD and LCD backlight
	pin 3 for buzzer
	pin 2 for extra button (alarm turn off button)
	5v to power LCD and I2C
        Ground

Unused pin AREF
       pin 13 (connects to on-board LED anyway)
       pin 4
       pins 1 and 0 (used during programming)

(other side)
       pin IOREF
       pin RESET
       pin 3.3v
       pin Vin
       pins A0, A1, A3, A4, A5

BEG, 2020 Nov 29

